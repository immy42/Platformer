Currently indexed functions:
[1] get_img_size(img)
[2] setGrid(x,y)
[3] loadStage(level_data,pos)
[4] generateStage(w,h)

Function name:
get_img_size(img)
Description:
Returns width/height values of (img) as tuple.
Example usage:
get_img_size("test.png")
>>> (x,y)
*where x = width of test.png, y = height of test.png.
Dependencies:
Pillow library (PIL) - uses .open, .size inbuilt functions.

Function name:
setGrid(x,y)
Description:
Creates multi dimensional array (2x 2D lists) where first list has length x, second list has length y.
Example usage:
setGrid(2,2)
>>>([[], []], [[], []])
Dependencies:
None

Function name:
loadStage(level_data,pos)
Description:
Appends all platforms within level_data to global platforms by calling platform() function for each x/y
position of a platform within level_data provided to this function. Works for every platform within each room within
a whole stage, and shifts position of platforms by 256 or 224 depending on its position within the stage's larger
grid of 256x224 per room within a whole stage.
Example usage:
loadStage(r"data\\rooms\\stage0.json",(1,0))
*adds each platform from stage0.json into the level, and shifts each platform's x position by 256 since (1,0) is one room to the right
of the beginning room (0,0).
Dependencies:
platform()

Function name:
generateStage(w,h)
Description:
Produce stage with width of w rooms, max height of h. Grabs all available rooms from r"data\rooms" and initiates
function loadStage using selected stage after processing logic (ensuring entrances/exits are positioned in traversable order).
Provides next room to load within stage until stage is filled to max width/height. Provides loadStage function with chosen room,
and the x/y position within the whole stage (on 256x224 grid).
Example usage:
generateStage(1,1)
>>> *see loadStage()
Dependencies:
loadStage()

Function name:
view.draw(self,img,x,y)
Description:
Draw [img] on screen at [x,y] position. Draws player/gui image stationary at the same place on screen e.g healthbar. Other images
drawn relative to their position within the stage.
Example usage:
view.draw(self,"test.png",10,10)
>>> *draws test.png on screen at (10,10)
Dependencies:
pygame.blit()

Function name:
place_meeting(xy,mask,offsetX,offsetY,Type)
Description:
xy = origin coordinates of calling object
mask = width & height of calling object's mask
offsetX = offset to add to calling object's X position for checking collision (negative = left, positive = right)
offsetY = offset to add to calling object's Y position for checking collision (negative = up, positive = down)
Example usage:
place_meeting(self.origin,self.maskXY,1,0,"enemy")
>>> *returns True if enemy found at calling object's x,y position to the right by 1 pixel, else False.
Dependencies:
None

Function name:
update()
Description:
Incorporated within most objects to call view.draw() to draw self.image upon screen. Update is uaully only called when object's coordinates within view on screen.'
Example usage:
obj.update()
>>> *usually either draws image or updates x/y position.
Dependencies:
None